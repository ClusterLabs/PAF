require 'ipaddr'
require 'yaml'

#ENV['VAGRANT_NO_PARALLEL'] = 'yes' # uncomment to forbid parallel execution

pgver     = '11'     # pg version to use
hapass    = 'hapass' # password for sys user hacluster 
ssh_login = 'root' # ssh login to connect to the host when fencing a VM.
                     # put "./ssh/id_rsa.pub" in your "~<ssh_login>/.ssh/authorized_keys"
master_ip = '10.20.30.5' # vIP assigned to master
nodes     = 'srv1', 'srv2', 'srv3' # servers to create. First one will be master
vm_prefix = 'paf_c7'

if File.file?('vagrant.yml') and ( custom = YAML.load_file('vagrant.yml') )
    pgver     = custom['pgver']     if custom.has_key?('pgver')
    hapass    = custom['hapass']    if custom.has_key?('hapass')
    ssh_login = custom['ssh_login'] if custom.has_key?('ssh_login')
    master_ip = custom['master_ip'] if custom.has_key?('master_ip')
    nodes     = custom['nodes']     if custom.has_key?('nodes')
    vm_prefix = custom['vm_prefix'] if custom.has_key?('vm_prefix')
end

Vagrant.configure(2) do |config|

    pgdata         = "/var/lib/pgsql/#{pgver}/data"
    net_dhcp_start = IPAddr.new(master_ip).succ.to_s
    network        = (IPAddr.new(master_ip) & "255.255.255.0").to_s
    host_ip        = (IPAddr.new(master_ip) & "255.255.255.0").succ.to_s
    first_node     = nodes[0]

    # https://vagrantcloud.com/search.
    config.vm.box = 'centos/7'

    # hardware and host settings
    config.vm.provider 'libvirt' do |lv|
        lv.cpus = 1
        lv.memory = 512
        lv.watchdog model: 'i6300esb'
        lv.default_prefix = vm_prefix
    end

    # disable default share
    config.vm.synced_folder ".", "/vagrant", disabled: true

    # allow root@vm to ssh to ssh_login@network_1
    config.vm.synced_folder 'ssh', '/root/.ssh', type: 'rsync',
        owner: 'root', group: 'root'

    config.vm.define 'log-sink' do |conf|
        conf.vm.hostname = 'log-sink'
        conf.vm.network 'private_network', type: 'dhcp',
            libvirt__network_address: network,
            libvirt__dhcp_start:      net_dhcp_start

        conf.vm.provision 'log-sink', type: 'shell', path: 'provision/log_sink.bash'
    end

    nodes.each do |node|
        config.vm.define node do |conf|
            conf.vm.hostname = node
            conf.vm.network 'private_network', type: 'dhcp',
                libvirt__network_address: network,
                libvirt__dhcp_start:      net_dhcp_start
            conf.vm.provision 'system-setup', type: 'shell', path: 'provision/system.bash',
                args: [ pgver, hapass, network, master_ip, node ]
        end
    end

    # setup master instance on first node
    config.vm.define first_node, primary:true do |node|
        node.vm.provision 'pgsql-primary', type: 'shell',
            path: 'provision/pgsql-primary.bash',
            args: [ pgver, pgdata, master_ip, first_node ]
    end

    # replicas setup. Use "vagrant up --provision-with=pgsql-replicas"
    nodes.select{|e| e != first_node}.each do |node|
        config.vm.define node do |conf|
            conf.vm.provision 'pgsql-replicas', type: 'shell', path: 'provision/pgsql-replicas.bash',
                args: [ pgver, pgdata, master_ip, node ],
                run: 'never'
        end
    end

    # cluster setup. Use "vagrant up --provision-with=ha"
    config.vm.define first_node do |node|
        node.vm.provision 'pacemaker', type: 'shell', path:'provision/pacemaker.bash',
            args: [ pgver, hapass, master_ip, ssh_login,
                    vm_prefix, host_ip, pgdata ] + nodes,
            run: 'never'
    end
end
